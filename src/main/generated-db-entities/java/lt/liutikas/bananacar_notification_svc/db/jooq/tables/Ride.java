/*
 * This file is generated by jOOQ.
 */
package lt.liutikas.bananacar_notification_svc.db.jooq.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import lt.liutikas.bananacar_notification_svc.db.jooq.Indexes;
import lt.liutikas.bananacar_notification_svc.db.jooq.Keys;
import lt.liutikas.bananacar_notification_svc.db.jooq.Public;
import lt.liutikas.bananacar_notification_svc.db.jooq.tables.records.JooqRideRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Ride extends TableImpl<JooqRideRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.ride</code>
     */
    public static final Ride RIDE = new Ride();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JooqRideRecord> getRecordType() {
        return JooqRideRecord.class;
    }

    /**
     * The column <code>public.ride.id</code>.
     */
    public final TableField<JooqRideRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.ride.bananacar_ride_id</code>.
     */
    public final TableField<JooqRideRecord, String> BANANACAR_RIDE_ID = createField(DSL.name("bananacar_ride_id"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>public.ride.locations</code>.
     */
    public final TableField<JooqRideRecord, JSONB> LOCATIONS = createField(DSL.name("locations"), SQLDataType.JSONB.nullable(false), this, "");

    /**
     * The column <code>public.ride.bananacar_url</code>.
     */
    public final TableField<JooqRideRecord, String> BANANACAR_URL = createField(DSL.name("bananacar_url"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.ride.departs_on</code>.
     */
    public final TableField<JooqRideRecord, LocalDateTime> DEPARTS_ON = createField(DSL.name("departs_on"), SQLDataType.LOCALDATETIME(3).nullable(false), this, "");

    /**
     * The column <code>public.ride.created_on</code>.
     */
    public final TableField<JooqRideRecord, LocalDateTime> CREATED_ON = createField(DSL.name("created_on"), SQLDataType.LOCALDATETIME(3).nullable(false), this, "");

    /**
     * The column <code>public.ride.updated_on</code>.
     */
    public final TableField<JooqRideRecord, LocalDateTime> UPDATED_ON = createField(DSL.name("updated_on"), SQLDataType.LOCALDATETIME(3).nullable(false), this, "");

    private Ride(Name alias, Table<JooqRideRecord> aliased) {
        this(alias, aliased, null);
    }

    private Ride(Name alias, Table<JooqRideRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.ride</code> table reference
     */
    public Ride(String alias) {
        this(DSL.name(alias), RIDE);
    }

    /**
     * Create an aliased <code>public.ride</code> table reference
     */
    public Ride(Name alias) {
        this(alias, RIDE);
    }

    /**
     * Create a <code>public.ride</code> table reference
     */
    public Ride() {
        this(DSL.name("ride"), null);
    }

    public <O extends Record> Ride(Table<O> child, ForeignKey<O, JooqRideRecord> key) {
        super(child, key, RIDE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_RIDE_BANANACAR_RIDE_ID);
    }

    @Override
    public UniqueKey<JooqRideRecord> getPrimaryKey() {
        return Keys.RIDE_PKEY;
    }

    @Override
    public Ride as(String alias) {
        return new Ride(DSL.name(alias), this);
    }

    @Override
    public Ride as(Name alias) {
        return new Ride(alias, this);
    }

    @Override
    public Ride as(Table<?> alias) {
        return new Ride(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Ride rename(String name) {
        return new Ride(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Ride rename(Name name) {
        return new Ride(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Ride rename(Table<?> name) {
        return new Ride(name.getQualifiedName(), null);
    }
}
